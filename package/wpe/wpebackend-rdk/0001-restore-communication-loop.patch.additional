diff --git a/src/wpeframework/display.cpp b/src/wpeframework/display.cpp
index e833bc3..a59e8f4 100644
--- a/src/wpeframework/display.cpp
+++ b/src/wpeframework/display.cpp
@@ -31,50 +31,6 @@
 
 namespace WPEFramework {
 
-// -----------------------------------------------------------------------------------------
-// GLIB framework thread, to keep the wayland loop a-live
-// -----------------------------------------------------------------------------------------
-class EventSource {
-public:
-    static GSourceFuncs sourceFuncs;
-
-    GSource source;
-    GPollFD pfd;
-    Compositor::IDisplay* display;
-    signed int result;
-};
-
-GSourceFuncs EventSource::sourceFuncs = {
-    // prepare
-    [](GSource* base, gint* timeout) -> gboolean {
-        *timeout = -1;
-        return FALSE;
-    },
-    // check
-    [](GSource* base) -> gboolean {
-        EventSource& source(*(reinterpret_cast<EventSource*>(base)));
-
-        source.result = source.display->Process(source.pfd.revents & G_IO_IN);
-
-        return (source.result >= 0 ? TRUE : FALSE);
-    },
-    // dispatch
-    [](GSource* base, GSourceFunc, gpointer) -> gboolean {
-        EventSource& source(*(reinterpret_cast<EventSource*>(base)));
-
-        if ((source.result == 1) || (source.pfd.revents & (G_IO_ERR | G_IO_HUP))) {
-            fprintf(stderr, "Compositor::Display: error in compositor dispatch\n");
-            return G_SOURCE_REMOVE;
-        }
-
-        source.pfd.revents = 0;
-        return G_SOURCE_CONTINUE;
-    },
-    nullptr, // finalize
-    nullptr, // closure_callback
-    nullptr, // closure_marshall
-};
-
 namespace {
     inline uint32_t TimeNow()
     {
@@ -224,7 +180,6 @@ void KeyboardHandler::HandleKeyEvent(const uint32_t key, const IKeyboard::state
 // -----------------------------------------------------------------------------------------
 Display::Display(IPC::Client& ipc, const std::string& name)
     : m_ipc(ipc)
-    , m_eventSource(g_source_new(&EventSource::sourceFuncs, sizeof(EventSource)))
     , m_keyboard(this)
     , m_wheel(this)
     , m_pointer(this)
@@ -232,21 +187,49 @@ Display::Display(IPC::Client& ipc, const std::string& name)
     , m_backend(nullptr)
     , m_display(Compositor::IDisplay::Instance(name))
 {
-    int descriptor = m_display->FileDescriptor();
-    EventSource* source(reinterpret_cast<EventSource*>(m_eventSource));
-
-    if (descriptor != -1) {
-        source->display = m_display;
-        source->pfd.fd = descriptor;
-        source->pfd.events = G_IO_IN | G_IO_ERR | G_IO_HUP;
-        source->pfd.revents = 0;
-
-        g_source_add_poll(m_eventSource, &source->pfd);
-        g_source_set_name(m_eventSource, "[WPE] Display");
-        g_source_set_priority(m_eventSource, G_PRIORITY_DEFAULT);
-        g_source_set_can_recurse(m_eventSource, TRUE);
-        g_source_attach(m_eventSource, g_main_context_get_thread_default());
+}
+
+static constexpr gint FD_TIMEOUT () {
+    // Milliseconds
+    // -1, infinite
+    // 0, immediate
+
+    return 0;
+}
+
+bool Display::vSyncCallback () {
+    static_assert (std::is_integral < gint >::value);
+    static_assert (std::is_integral < decltype (m_display->FileDescriptor ()) >::value);
+    static_assert (std::numeric_limits < gint >::min () >= std::numeric_limits < decltype (m_display->FileDescriptor ()) >::min ());
+    static_assert (std::numeric_limits < gint >::max () <= std::numeric_limits < decltype (m_display->FileDescriptor ()) >::max ());
+
+    static gint _fd = m_display->FileDescriptor ();
+
+    gushort _flags = 0;
+
+    if (_fd != -1) {
+        // Watchh for data to read, errors or broken connection
+        GPollFD _gfd =  {_fd, /* events to poll */ G_IO_IN | G_IO_ERR | G_IO_HUP | G_IO_NVAL, /* resulting events of poll */ _flags};
+
+        switch (g_poll (&_gfd, /* number of entries */ 1, /* timeout */ FD_TIMEOUT ())) {
+            case -1 :   // Error
+            case 0  :   // Timed out, always for timeout equal 0
+                        _flags = 0;
+                        break;
+            default :   // Return value should match g_poll's second field
+                        // Signal there is data to read
+                        _flags = _gfd.revents & (G_IO_IN | G_IO_ERR | G_IO_HUP | G_IO_NVAL);
+        }
     }
+
+    static_assert (std::is_integral < decltype (_flags) >::value);
+    static_assert (std::numeric_limits < decltype (_flags) >::min () >= std::numeric_limits < uint32_t >::min ());
+    static_assert (std::numeric_limits < decltype (_flags) >::max () <= std::numeric_limits < uint32_t >::max ());
+
+    // If the loop 'runs' too fast check the implementation of Process
+    // You may want to add a delay based on the underlying platform just there
+
+    return (m_display != nullptr ? 0 == m_display->Process (_flags) : false);
 }
 
 Display::~Display()
diff --git a/src/wpeframework/display.h b/src/wpeframework/display.h
index 8b4fcd0..024bc66 100644
--- a/src/wpeframework/display.h
+++ b/src/wpeframework/display.h
@@ -225,7 +225,10 @@ public:
     void SendEvent(wpe_input_touch_event& event);
     void SendEvent(wpe_input_touch_event_raw& event);
 
+    bool vSyncCallback ();
+
 private:
+
     virtual void Key(const bool pressed, uint32_t keycode, uint32_t unicode, uint32_t modifiers, uint32_t time) override;
     virtual void Key(const uint32_t key, const Compositor::IDisplay::IKeyboard::state action);
     virtual void WheelMotion(const int16_t horizontal, const int16_t vertical) override;
@@ -235,7 +238,6 @@ private:
 
 private:
     IPC::Client& m_ipc;
-    GSource* m_eventSource;
     KeyboardHandler m_keyboard;
     WheelHandler m_wheel;
     PointerHandler m_pointer;
diff --git a/src/wpeframework/renderer-backend.cpp b/src/wpeframework/renderer-backend.cpp
index 88082fc..5570908 100644
--- a/src/wpeframework/renderer-backend.cpp
+++ b/src/wpeframework/renderer-backend.cpp
@@ -185,6 +185,12 @@ struct wpe_renderer_backend_egl_target_interface wpeframework_renderer_backend_e
     {
         WPEFramework::EGLTarget& target (*static_cast<WPEFramework::EGLTarget*>(data));
 
+        /* bool */ target.display.vSyncCallback ();
+
+        // The message has to be sent regardless of the vSyncCallback result.
+        // Otherwise, the 'frame complete' is never sent, possibly breaking 
+        // the feedback loop.
+
         IPC::Message message;
         IPC::BufferCommit::construct(message);
         target.ipcClient.sendMessage(IPC::Message::data(message), IPC::Message::size);
diff --git a/src/wpeframework/view-backend.cpp b/src/wpeframework/view-backend.cpp
index 3f50991..7cc6f64 100644
--- a/src/wpeframework/view-backend.cpp
+++ b/src/wpeframework/view-backend.cpp
@@ -45,16 +45,11 @@ struct ViewBackend : public IPC::Host::Handler {
     void handleFd(int) override { };
     void handleMessage(char*, size_t) override;
 
-    void ackBufferCommit();
     void initialize();
 
-    static gboolean vsyncCallback(gpointer);
-
     struct wpe_view_backend* backend;
     std::array<struct wpe_input_touch_event_raw, 10> touchpoints;
     IPC::Host ipcHost;
-    GSource* vsyncSource;
-    bool triggered;
 };
 
 static uint32_t MaxFPS() {
@@ -72,22 +67,14 @@ static uint32_t MaxFPS() {
  
 ViewBackend::ViewBackend(struct wpe_view_backend* backend)
     : backend(backend)
-    , vsyncSource(g_timeout_source_new(MaxFPS()))
-    , triggered(false)
 {
     ipcHost.initialize(*this);
 
-    g_source_set_callback(vsyncSource, static_cast<GSourceFunc>(vsyncCallback), this, nullptr);
-    g_source_set_priority(vsyncSource, G_PRIORITY_HIGH + 30);
-    g_source_set_can_recurse(vsyncSource, TRUE);
-    g_source_attach(vsyncSource, g_main_context_get_thread_default());
-
     touchpoints.fill({ wpe_input_touch_event_type_null, 0, 0, 0, 0 });
 }
 
 ViewBackend::~ViewBackend()
 {
-    g_source_destroy(vsyncSource);
     ipcHost.deinitialize();
 }
 
@@ -141,7 +128,10 @@ void ViewBackend::handleMessage(char* data, size_t size)
     }
     case IPC::BufferCommit::code:
     {
-        triggered = true;
+    	IPC::Message message;
+    	IPC::FrameComplete::construct(message);
+    	ipcHost.sendMessage(IPC::Message::data(message), IPC::Message::size);
+
         break;
     }
     case IPC::AdjustedDimensions::code:
@@ -174,27 +164,6 @@ void ViewBackend::initialize()
     wpe_view_backend_dispatch_set_size( backend, width, height);
 }
 
-void ViewBackend::ackBufferCommit()
-{
-    IPC::Message message;
-    IPC::FrameComplete::construct(message);
-    ipcHost.sendMessage(IPC::Message::data(message), IPC::Message::size);
-
-    wpe_view_backend_dispatch_frame_displayed(backend);
-}
-
-gboolean ViewBackend::vsyncCallback(gpointer data)
-{
-    ViewBackend* impl = static_cast<ViewBackend*>(data);
-
-    if (impl->triggered) {
-        impl->triggered = false;
-        impl->ackBufferCommit();
-    }
-
-    return (G_SOURCE_CONTINUE);
-}
-
 } // namespace WPEFramework
 
 extern "C" {
